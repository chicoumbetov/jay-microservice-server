/*
ChannelModel {
    _events: [Object: null prototype] {},
    _eventsCount: 0,
    _maxListeners: undefined,
    connection: Connection {
      _events: [Object: null prototype] {
        frameError: [Function: bound onSocketError],
        error: [Function: bound emit],
        close: [Function: bound emit],
        blocked: [Function: bound emit],
        unblocked: [Function: bound emit]
      },
      _eventsCount: 5,
      _maxListeners: undefined,
      stream: Socket {
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: [Object],
        _readableState: [ReadableState],
        _writableState: [WritableState],
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 4,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: null,
        _server: null,
        autoSelectFamilyAttemptedAddresses: [Array],
        [Symbol(async_id_symbol)]: 195,
        [Symbol(kHandle)]: [TCP],
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: null,
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: false,
        [Symbol(kSetKeepAliveInitialDelay)]: 0,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0
      },
      muxer: Mux {
        newStreams: [],
        oldStreams: [],
        blocked: false,
        scheduledRead: false,
        out: [Socket]
      },
      rest: <Buffer >,
      frameMax: 4096,
      sentSinceLastCheck: true,
      recvSinceLastCheck: true,
      expectSocketClose: false,
      freeChannels: BitSet { words: [], wordsInUse: 0 },
      channels: [ [Object] ],
      serverProperties: {
        capabilities: [Object],
        cluster_name: 'rabbit@Shynggyss-MacBook-Pro',
        copyright: 'Copyright (c) 2007-2024 Broadcom Inc and/or its subsidiaries',
        information: 'Licensed under the MPL 2.0. Website: https://rabbitmq.com',
        platform: 'Erlang/OTP 27.2',
        product: 'RabbitMQ',
        version: '4.0.4'
      },
      channelMax: 2047,
      heartbeat: 60,
      heartbeater: Heart {
        _events: [Object: null prototype],
        _eventsCount: 2,
        _maxListeners: undefined,
        interval: 60,
        sendTimer: Timeout {
          _idleTimeout: 30000,
          _idlePrev: [TimersList],
          _idleNext: [Timeout],
          _idleStart: 1577,
          _onTimeout: [Function: bound runHeartbeat],
          _timerArgs: undefined,
          _repeat: 30000,
          _destroyed: false,
          [Symbol(refed)]: true,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 206,
          [Symbol(triggerId)]: 203,
          [Symbol(kAsyncContextFrame)]: undefined
        },
        recvTimer: Timeout {
          _idleTimeout: 60000,
          _idlePrev: [TimersList],
          _idleNext: [TimersList],
          _idleStart: 1577,
          _onTimeout: [Function: bound runHeartbeat],
          _timerArgs: undefined,
          _repeat: 60000,
          _destroyed: false,
          [Symbol(refed)]: true,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 207,
          [Symbol(triggerId)]: 203,
          [Symbol(kAsyncContextFrame)]: undefined
        },
        [Symbol(shapeMode)]: false,
        [Symbol(kCapture)]: false
      },
      accept: [Function: mainAccept],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false
  }
*/
